
jobs:
- job: build

  pool:
    vmImage: 'ubuntu-latest'

  variables:
    buildConfiguration: 'Release'

  steps:
  - script: dotnet restore
    displayName: 'dotnet restore'

# Build new assembly version 
#
  - bash: |
      echo "##vso[task.setvariable variable=VERSION]1.`date +'%y'`.`date +'%-j'`.`git rev-list --count HEAD`"
      echo "build assembly version $VERSION"

# Build the solution
#
  - script: dotnet build --configuration $(buildConfiguration) /p:AssemblyVersion=$(VERSION)
    displayName: 'dotnet build $(buildConfiguration)' 

# Looks weird, but I have to delete protobuf-net.dll as there is no other options to exclude it from test coverage
#
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: find $(System.DefaultWorkingDirectory) -type f | grep -P ".*XUnitTest.*protobuf-net.dll$" | xargs -d "\n" rm -fv

# Run all tests and generate the code coverage file
#
  - task: DotNetCoreCLI@2
    inputs:
      command: test
      projects: "**/*XUnitTest/*.csproj"
      arguments: -c $(BuildConfiguration) --no-build --no-restore -s $(System.DefaultWorkingDirectory)/CodeCoverage.runsettings --collect:"XPlat Code Coverage" 
    displayName: Run Tests


# Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
# First install the tool on the machine, then run it
#
  - script: 
    dotnet tool install --tool-path . dotnet-reportgenerator-globaltool
    displayName: Install reportgenerator

  - script: 
    ./reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:"Cobertura"
     displayName: Create Code coverage report

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
#
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
